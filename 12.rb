# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

class TriangleGenerator

  @@last_triangle = 0

  def initialize()
    last_triangle = 0
  end

  def last_triangle
    return @@last_triangle
  end

  def next_triangle(num)
    if @@last_triangle > 0
      @@last_triangle += num
    else
      @@last_triangle = Array(1..num).reduce {|sum,i| sum + i }
    end
  
    return @@last_triangle
  end
end

def divisors(num)
  return Array(1..num).select {|i| num % i == 0 }
end

i=1 #5050
threshold = 500

tg = TriangleGenerator.new()
while ((len = divisors(tg.next_triangle(i)).length) <= threshold)
#  puts "#{i} #{len}"
  i += 1
end

puts tg.last_triangle()
